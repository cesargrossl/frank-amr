#!/usr/bin/env python3
import time

try:
    import gpiod
except ImportError:
    raise SystemExit("Instale: sudo apt update && sudo apt install python3-libgpiod gpiod")

CHIP_NAME = "gpiochip0"   # ajuste se necessário após checar com `gpioinfo`
IN7 = 17                  # pino físico 11
IN8 = 27                  # pino físico 13
ACTIVE_LOW = True         # a maioria dos módulos de relé é ativo em LOW

def main_v2():
    # API v2: tem LineSettings e LineValue
    chip = gpiod.Chip(CHIP_NAME)
    req = chip.request_lines(
        consumer="reles",
        config={
            (IN7,): gpiod.LineSettings(
                direction=gpiod.LineDirection.OUTPUT,
                output_value=(gpiod.LineValue.HIGH if ACTIVE_LOW else gpiod.LineValue.LOW)
            ),
            (IN8,): gpiod.LineSettings(
                direction=gpiod.LineDirection.OUTPUT,
                output_value=(gpiod.LineValue.HIGH if ACTIVE_LOW else gpiod.LineValue.LOW)
            ),
        }
    )

    def relay_on(pin):
        req.set_value(pin, gpiod.LineValue.LOW if ACTIVE_LOW else gpiod.LineValue.HIGH)

    def relay_off(pin):
        req.set_value(pin, gpiod.LineValue.HIGH if ACTIVE_LOW else gpiod.LineValue.LOW)

    try:
        print("V2: Ligando IN7 (GPIO17) por 2s…")
        relay_on(IN7)
        time.sleep(2)

        print("V2: Desliga IN7, liga IN8 (GPIO27) por 2s…")
        relay_off(IN7)
        relay_on(IN8)
        time.sleep(2)

        print("V2: Desligando IN8…")
        relay_off(IN8)
    finally:
        try:
            relay_off(IN7)
            relay_off(IN8)
        except Exception:
            pass
        req.release()
        chip.close()

def main_v1():
    # API v1: tem LINE_REQ_DIR_OUT e get_line()
    chip = gpiod.Chip(CHIP_NAME)
    line7 = chip.get_line(IN7)
    line8 = chip.get_line(IN8)

    # Estado "desligado" (HIGH se ativo LOW; LOW se ativo HIGH)
    off_val = 1 if ACTIVE_LOW else 0
    on_val  = 0 if ACTIVE_LOW else 1

    line7.request(consumer="reles", type=gpiod.LINE_REQ_DIR_OUT, default_vals=[off_val])
    line8.request(consumer="reles", type=gpiod.LINE_REQ_DIR_OUT, default_vals=[off_val])

    try:
        print("V1: Ligando IN7 (GPIO17) por 2s…")
        line7.set_value(on_val)
        time.sleep(2)

        print("V1: Desliga IN7, liga IN8 (GPIO27) por 2s…")
        line7.set_value(off_val)
        line8.set_value(on_val)
        time.sleep(2)

        print("V1: Desligando IN8…")
        line8.set_value(off_val)
    finally:
        line7.set_value(off_val)
        line8.set_value(off_val)
        line7.release()
        line8.release()
        chip.close()

if __name__ == "__main__":
    # Detecta API: se existir LineSettings -> v2; senão tenta v1
    if hasattr(gpiod, "LineSettings"):
        main_v2()
    else:
        main_v1()
